/*
   Generated by EX4 TO MQ4 decompile Service 
   Website: http://www.ex4Tomq4.net 
   E-mail : info@ex4Tomq4.net 
*/
#property copyright "copyright:Hamed Ehtemam"
#property link      ""

#import "H-ESpider.dll"
   int CanTrade(int a0, double a1, double a2, int a3, int a4, int a5, int a6, double& a7[], double& a8[], int& a9[], double& a10[], int& a11[], int a12, int a13, string a14);
#import

extern string Key = "Enter the license code here";
extern string OPMM = "------------------Lot settings------------------";
extern double LotsStep = 0.01;
extern string H1 = "Increase lot size every BalanceStep of balance";
extern double BalanceStep = 100.0;
extern string H2 = "Minumum lot size.If Use MM=false EA use this value for fixed lot size";
extern double MinLots = 0.01;
extern double MaxLots = 1000.0;
extern bool UseMM = TRUE;
extern string H3 = "Set this to true to reduce the lot size after losses.NOT RECOMMENDED!!!";
extern bool CanReduseLotSize = FALSE;
extern string OPSC = "------------------ Scaner settings-----------------";
extern int MaxTP = 60;
extern int MaxSL = 40;
extern int Filter = 20;
extern int Landa = 10;
extern int Teta = 6;
extern bool HuntVPulse = TRUE;
extern bool HuntLPulse = TRUE;
extern string OPTR = "------------------ Trade settings-----------------";
extern string H4 = "Only set this to false if your broker doesnt support expiration!";
extern bool UseExpiration = TRUE;
extern bool FakeStop = TRUE;
int gi_216 = 10;
extern int magicnumber = 1010325;
extern string H5 = "Update on screen information";
extern bool UpdateHUD = TRUE;
int gi_236;
string gs_240 = "H-ESpider";
double gd_248;
int gia_256[2];
int gi_260 = 0;
int gi_264 = 0;

int init() {
   if (IsOptimization() || IsTesting()) GlobalVariableSet(f0_5(), MinLots);
   gd_248 = Point;
   if (Digits == 5 || Digits == 3) gd_248 = 10.0 * gd_248;
   if (IsDemo()) gi_260 = TRUE;
   gi_264 = AccountNumber();
   f0_1();
   gia_256[1] = -1;
   return (1);
}

int deinit() {
   if (IsTesting()) GlobalVariableDel(f0_5());
   f0_12();
   return (0);
}

int start() {
   int li_0;
   int li_28;
   int li_32;
   double lda_48[6];
   double lda_52[6];
   int lia_56[6];
   double ld_60;
   double lda_104[2];
   f0_9();
   if (gia_256[1] == 0 && TimeCurrent() < gi_236) return (-1);
   if (gia_256[1] != 1 && gia_256[1] != -1) Print("Invalid Key!!! No new trade will be opened.");
   gi_236 = TimeCurrent() + 300;
   bool li_12 = TRUE;
   bool li_16 = TRUE;
   bool li_20 = TRUE;
   bool li_24 = TRUE;
   double ld_36 = 0;
   int li_44 = 0;
   for (int li_8 = 0; li_8 < 500; li_8++) {
      ld_36 = iCustom(NULL, 0, "H-EImpulse", 1, li_8);
      if (li_8 == 0) ld_60 = ld_36;
      if (ld_36 != 0.0) {
         lda_48[li_44] = ld_36;
         lia_56[li_44] = li_8;
         lda_52[li_44] = iCustom(NULL, 0, "H-EImpulse", 0, li_8);
         if (li_44 == 5) break;
         li_44++;
      }
   }
   for (int li_4 = 0; li_4 < OrdersTotal(); li_4++) {
      if (OrderSelect(li_4, SELECT_BY_POS, MODE_TRADES) && OrderSymbol() == Symbol() && OrderMagicNumber() == magicnumber) {
         if (OrderType() == OP_BUYSTOP || OrderType() == OP_BUY) {
            if (OrderComment() == f0_0("V")) {
               li_12 = FALSE;
               li_28++;
            }
            if (OrderComment() != f0_0("L")) continue;
            li_20 = FALSE;
            li_32++;
            continue;
         }
         if (OrderType() == OP_SELLSTOP || OrderType() == OP_SELL) {
            if (OrderComment() == f0_0("V")) {
               li_16 = FALSE;
               li_28++;
            }
            if (OrderComment() == f0_0("L")) {
               li_24 = FALSE;
               li_32++;
            }
         }
      }
   }
   f0_13(li_28, li_32);
   double ld_68 = lda_48[0];
   double ld_76 = lda_48[1];
   double ld_84 = lda_48[2];
   int li_92 = lia_56[0];
   int li_96 = lia_56[1];
   int li_100 = lia_56[2];
   int li_108 = 1;
   if (!FakeStop) li_108 = -1;
   int li_112 = iTime(Symbol(), 0, 0) + 60 * (Teta * Period()) - 60;
   if (!UseExpiration) li_112 = 0;
   if (HuntVPulse) {
      if (li_12 == TRUE && CanTrade(0, gd_248, Filter, Landa, MaxTP, MaxSL, li_108, lda_48, lda_52, lia_56, lda_104, gia_256, gi_264, gi_260, Key) == 1) li_0 = OrderSend(Symbol(), OP_BUYSTOP, f0_4(), ld_76, gi_216, lda_104[1], lda_104[0], f0_0("V"), magicnumber, li_112);
      if (li_16 == TRUE && CanTrade(1, gd_248, Filter, Landa, MaxTP, MaxSL, li_108, lda_48, lda_52, lia_56, lda_104, gia_256, gi_264, gi_260, Key) == 1) li_0 = OrderSend(Symbol(), OP_SELLSTOP, f0_4(), ld_76, gi_216, lda_104[1], lda_104[0], f0_0("V"), magicnumber, li_112);
   }
   if (HuntLPulse) {
      if (ld_60 != 0.0 && li_20 && CanTrade(2, gd_248, Filter, Landa, MaxTP, MaxSL, li_108, lda_48, lda_52, lia_56, lda_104, gia_256, gi_264, gi_260, Key) == 1) li_0 = OrderSend(Symbol(), OP_BUYSTOP, f0_4(), ld_84, gi_216, lda_104[1], lda_104[0], f0_0("L"), magicnumber, li_112);
      if (ld_60 != 0.0 && li_24 && CanTrade(3, gd_248, Filter, Landa, MaxTP, MaxSL, li_108, lda_48, lda_52, lia_56, lda_104, gia_256, gi_264, gi_260, Key) == 1) li_0 = OrderSend(Symbol(), OP_SELLSTOP, f0_4(), ld_84, gi_216, lda_104[1], lda_104[0], f0_0("L"), magicnumber, li_112);
   }
   return (0);
}

void f0_9() {
   int li_8 = OrdersTotal();
   for (int li_0 = 0; li_0 < li_8; li_0++) {
      OrderSelect(li_0, SELECT_BY_POS, MODE_TRADES);
      if (f0_3() == 1) {
         if (OrderType() == OP_BUY) OrderClose(OrderTicket(), OrderLots(), Bid, 10, Yellow);
         if (OrderType() == OP_SELL) OrderClose(OrderTicket(), OrderLots(), Ask, 10, Yellow);
      }
   }
}

int f0_3() {
   if (OrderSymbol() != Symbol() || OrderMagicNumber() != magicnumber) return (0);
   if (OrderType() == OP_BUYSTOP || OrderType() == OP_SELLSTOP)
      if (TimeCurrent() - OrderOpenTime() >= 60 * (Teta * Period()) - 55) OrderDelete(OrderTicket());
   if (FakeStop) {
      if (OrderType() == OP_BUY && Bid - OrderOpenPrice() >= MaxTP * gd_248 || Bid - OrderOpenPrice() <= (-MaxSL) * gd_248) return (1);
      if (OrderType() == OP_SELL && OrderOpenPrice() - Ask >= MaxTP * gd_248 || OrderOpenPrice() - Ask <= (-MaxSL) * gd_248) return (1);
   }
   return (0);
}

string f0_5() {
   string ls_0;
   if (IsTesting()) ls_0 = StringConcatenate("SpiderMaxLot", Symbol(), DoubleToStr(magicnumber, 0), "_Test");
   else ls_0 = StringConcatenate("SpiderMaxLot", Symbol(), DoubleToStr(magicnumber, 0));
   return (ls_0);
}

string f0_0(string as_0) {
   return (StringConcatenate(gs_240, " ", as_0));
}

double f0_4() {
   double ld_0 = MinLots;
   int li_8 = AccountBalance() / BalanceStep;
   if (UseMM && li_8 > 0) {
      ld_0 = MathMax(LotsStep * li_8, MinLots);
      if (!GlobalVariableCheck(f0_5())) GlobalVariableSet(f0_5(), ld_0);
      else
         if (!CanReduseLotSize) ld_0 = MathMax(ld_0, GlobalVariableGet(f0_5()));
      ld_0 = f0_2(MathMin(ld_0, MaxLots));
      GlobalVariableSet(f0_5(), ld_0);
   }
   return (ld_0);
}

double f0_2(double ad_0, string as_8 = "") {
   if (as_8 == "") as_8 = Symbol();
   double ld_16 = MarketInfo(as_8, MODE_LOTSTEP);
   double ld_24 = MarketInfo(as_8, MODE_MINLOT);
   double ld_32 = MathRound(ad_0 / ld_16) * ld_16;
   if (ld_32 < ld_24) ld_32 = ld_24;
   return (MathMin(ld_32, MarketInfo(as_8, MODE_MAXLOT)));
}

void f0_6(string as_0, int ai_8, int ai_12, string as_16, color ai_24, int ai_28 = 10, string as_32 = "Arial Black") {
   f0_7(as_0, ai_8, ai_12);
   ObjectSetText(as_0, as_16, ai_28, as_32, ai_24);
}

void f0_7(string as_0, int ai_8, int ai_12) {
   ObjectCreate(as_0, OBJ_LABEL, 0, 0, 0);
   ObjectSet(as_0, OBJPROP_CORNER, 0);
   ObjectSet(as_0, OBJPROP_XDISTANCE, ai_8);
   ObjectSet(as_0, OBJPROP_YDISTANCE, ai_12);
}

void f0_10(int ai_0, int ai_4, string as_8, string as_16, string as_24, int ai_32 = 16777215, int ai_36 = 16777215) {
   f0_6(as_8 + "_S", ai_0, ai_4, as_16, ai_32);
   f0_6(as_8, ai_0 + 130, ai_4, as_24, ai_36);
}

void f0_1() {
   f0_6("TXT_COPYRIGHT", 0, 15, "H-ESpider Copyright � hespider.com", White, 10, "Arial Black");
   f0_6("TXT_LICENSE", 0, 50, "Validating key...", Yellow);
   f0_10(0, 70, "TXT_SPREAD", "Spread----------------�", DoubleToStr(f0_8(), 1) + " Pips");
   f0_10(0, 90, "TXT_PULSE", "Pulses---------------�", " ");
   f0_10(0, 150, "TXT_VERSION", "Version---------------�", "1.6 Beta");
   f0_10(0, 170, "TXT_MAGIC", "MagicNumber----�", magicnumber);
   if (UseMM) {
      f0_10(0, 190, "TXT_MM", "MM-----------------------�", "True");
      return;
   }
   f0_10(0, 190, "TXT_MM", "MM-----------------------�", "False");
}

double f0_8() {
   double ld_0 = (Ask - Bid) / gd_248;
   return (ld_0);
}

void f0_13(int ai_0, int ai_4) {
   int li_8;
   string ls_12;
   if (gia_256[1] == -1) {
      ObjectSetText("TXT_LICENSE", "Validating key...", 10, "Arial Black", Yellow);
      return;
   }
   if (gia_256[1] == 0) {
      ObjectSetText("TXT_LICENSE", "Activation failed! Use license manager to activate your account.", 10, "Arial Black", Red);
      return;
   }
   if (gia_256[1] == 1) ObjectSetText("TXT_LICENSE", "Active", 10, "Arial Black", Lime);
   if (UpdateHUD) {
      ObjectSetText("TXT_SPREAD", DoubleToStr(f0_8(), 1) + " Pips", 10, "Arial Black", White);
      if (ai_0 + ai_4 > 0) {
         ObjectSetText("TXT_PULSE_S", "Pulses----------------�", 10, "Arial Black", White);
         ObjectSetText("TXT_PULSE", DoubleToStr(ai_0 + ai_4, 0), 10, "Arial Black", White);
      } else {
         li_8 = MathMod(TimeCurrent(), 10);
         ls_12 = "Pulses-";
         for (int li_20 = 0; li_20 <= li_8; li_20++) ls_12 = ls_12 + "-";
         ls_12 = ls_12 + "�";
         ObjectSetText("TXT_PULSE_S", ls_12, 10, "Arial Black", White);
         ObjectSetText("TXT_PULSE", "Scanning...", 10, "Arial Black", White);
      }
   }
}

void f0_11(string as_0) {
   ObjectDelete(as_0 + "_S");
   ObjectDelete(as_0);
}

void f0_12() {
   ObjectDelete("TXT_LICENSE");
   ObjectDelete("TXT_COPYRIGHT");
   f0_11("TXT_SPREAD");
   f0_11("TXT_PULSE");
   f0_11("TXT_VERSION");
   f0_11("TXT_MM");
   f0_11("TXT_MAGIC");
}
